# OPENAI_API_KEY=sk-proj-50FZ1HbOazRJXBXBVavcT3BlbkFJfArKQCQjr3zKkuEKcMKl
HUGGING_FACE_API_KEY=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

# const express = require("express");
# const bodyParser = require("body-parser");
# const { MongoClient, ObjectID } = require("mongodb");
# const cors = require("cors");
# const nodemailer = require("nodemailer");
# const openai = require('openai'); // Ensure OpenAI SDK is installed and configured

# // Initialize OpenAI API (replace with your actual API key)
# openai.apiKey = 'Bearer sk-assd-wPwBKGvlWS7m4KrsZdrPT3BlbkFJ3SmSNTVVJDPOqWcvYknk'; // Use your OpenAI API key

# const app = express();
# const PORT = process.env.PORT || 5002;

# app.use(cors()); // Allow all origins
# app.use(bodyParser.json());

# const uri = "mongodb://localhost:27017";
# const client = new MongoClient(uri, {
#   useNewUrlParser: true,
#   useUnifiedTopology: true,
# });

# let db;

# (async () => {
#   try {
#     await client.connect();
#     db = client.db("EmailAll");
#     console.log("Connected to MongoDB");
#   } catch (error) {
#     console.error("Error connecting to MongoDB:", error);
#     process.exit(1);
#   }
# })();

# // Configure Nodemailer transporter
# const transporter = nodemailer.createTransport({
#   service: "gmail",
#   auth: {
#     user: "g9425347@gmail.com", // Your Gmail email address
#     pass: "lrfllfqitxajjvjb", // Your Gmail password or App Password
#   },
# });

# // POST endpoint for sending emails
# app.post("/api/send-email", async (req, res) => {
#   const { to, subject, body } = req.body;

#   const mailOptions = {
#     from: "g9425347@gmail.com", // Sender address (must be the same as auth.user)
#     to: to, // Recipient's email address
#     subject: subject, // Subject line
#     text: body, // Plain text body
#   };

#   try {
#     // Send email using Nodemailer transporter
#     await transporter.sendMail(mailOptions);
#     console.log("Email sent successfully");
#     res.status(200).json({ message: "Email sent successfully" });
#   } catch (error) {
#     console.error("Error sending email:", error);
#     res.status(500).json({ error: "Failed to send email" });
#   }
# });

# // Handle POST request to create a job
# app.post("/api/jobs", async (req, res) => {
#   const jobData = req.body;
#   const collection = db.collection("jobs");

#   try {
#     const result = await collection.insertOne(jobData);
#     res.json({
#       message: "Job posted successfully!",
#       job: { _id: result.insertedId, ...jobData },
#     });
#   } catch (error) {
#     console.error("Error posting job:", error);
#     res.status(500).json({ error: "Failed to post job" });
#   }
# });

# // Handle GET request to fetch all jobs
# app.get("/api/jobs", async (req, res) => {
#   try {
#     const collection = db.collection("jobs");
#     const jobs = await collection.find().toArray();
#     res.json(jobs);
#   } catch (error) {
#     console.error("Error fetching jobs:", error);
#     res.status(500).json({ message: "Error fetching jobs", error });
#   }
# });

# // Handle GET request to fetch job by ID
# app.get("/api/jobs/:id", async (req, res) => {
#   try {
#     const jobId = req.params.id;
#     const collection = db.collection("jobs");
#     const job = await collection.findOne({ _id: new ObjectID(jobId) });
#     if (!job) {
#       return res.status(404).send({ message: "Job not found" });
#     }
#     res.send(job);
#   } catch (error) {
#     console.error("Error fetching job details:", error);
#     res.status(500).send({ message: "Error fetching job details", error });
#   }
# });

# // Generate job description using OpenAI
# app.post('/api/generate-description', async (req, res) => {
#   const { obTitle , skills } = req.body;
#   const prompt = `Create a job description for a ${obTitle } with skills: ${skills}`;

#   try {
#     console.log(`Generating job description for ${obTitle } with skills: ${skills}`);
    
#     const response = await openai.Completions.create({
#       model: 'text-davinci-003',
#       prompt: prompt,
#       max_tokens: 150,
#       temperature: 0.7,
#     });

#     const description = response.choices[0].text.trim();
#     console.log(`Generated description: ${description}`);

#     res.json({ description });
#   } catch (error) {
#     console.error('Error generating job description:', error.response.data);
#     res.status(500).json({ error: 'Error generating job description' });
#   }
# });


# // Match resumes based on job description
# app.post('/api/match-resumes', async (req, res) => {
#   const { jobDescription } = req.body;

#   try {
#     const resumes = await getResumesFromDatabase(); // Fetch resumes from your database
#     const matchedResumes = resumes.filter(resume => {
#       return resume.skills.some(skill => jobDescription.includes(skill));
#     });
#     res.json({ resumes: matchedResumes });
#   } catch (error) {
#     console.error('Error matching resumes:', error);
#     res.status(500).json({ error: 'Error matching resumes' });
#   }
# });

# // Function to fetch resumes from MongoDB (dummy implementation)
# async function getResumesFromDatabase() {
#   const collection = db.collection("resumes"); // Assuming your resumes are stored in a "resumes" collection
#   return await collection.find().toArray();
# }

# app.listen(PORT, () => {
#   console.log(`Server is running on port ${PORT}`);
# });
